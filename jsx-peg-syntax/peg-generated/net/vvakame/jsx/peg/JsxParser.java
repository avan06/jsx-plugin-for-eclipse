//=========================================================================
//
//  This file was generated by Mouse 1.5 at 2012-09-07 09:26:13 GMT
//  from grammar
//    '/Users/vvakame/Dropbox/work/jsx-plugin-for-eclipse/jsx-peg-syntax/sr
//    c/main/peg/JSX.peg'.
//
//=========================================================================

package net.vvakame.jsx.peg;

import mouse.runtime.Source;

public class JsxParser extends mouse.runtime.ParserBase
{
  final JsxSemantics sem;
  
  //=======================================================================
  //
  //  Initialization
  //
  //=======================================================================
  //-------------------------------------------------------------------
  //  Constructor
  //-------------------------------------------------------------------
  public JsxParser()
    {
      sem = new JsxSemantics();
      sem.rule = this;
      super.sem = sem;
    }
  
  //-------------------------------------------------------------------
  //  Run the parser
  //-------------------------------------------------------------------
  public boolean parse(Source src)
    {
      super.init(src);
      sem.init();
      if (programFile()) return true;
      return failure();
    }
  
  //-------------------------------------------------------------------
  //  Get semantics
  //-------------------------------------------------------------------
  public JsxSemantics semantics()
    { return sem; }
  
  //=======================================================================
  //
  //  Parsing procedures
  //
  //=======================================================================
  //=====================================================================
  //  programFile = spacing importStatement* classDefinition* !_
  //    {programFile} ;
  //=====================================================================
  private boolean programFile()
    {
      begin("programFile");
      spacing();
      while (importStatement());
      while (classDefinition());
      if (!aheadNot()) return reject();
      sem.programFile();
      return accept();
    }
  
  //=====================================================================
  //  importStatement = IMPORT (ident (COMMA ident)* FROM)? string (INTO
  //    ident)? SEMI {importStatement} ;
  //=====================================================================
  private boolean importStatement()
    {
      begin("importStatement");
      if (!IMPORT()) return reject();
      importStatement_0();
      if (!string()) return reject();
      importStatement_1();
      if (!SEMI()) return reject();
      sem.importStatement();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  importStatement_0 = ident (COMMA ident)* FROM
  //-------------------------------------------------------------------
  private boolean importStatement_0()
    {
      begin("");
      if (!ident()) return rejectInner();
      while (importStatement_2());
      if (!FROM()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  importStatement_1 = INTO ident
  //-------------------------------------------------------------------
  private boolean importStatement_1()
    {
      begin("");
      if (!INTO()) return rejectInner();
      if (!ident()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  importStatement_2 = COMMA ident
  //-------------------------------------------------------------------
  private boolean importStatement_2()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      if (!ident()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  classDefinition = oClassModifiers* (oClassDef / oInterfaceDef /
  //    oMixinDef) spacing ;
  //=====================================================================
  private boolean classDefinition()
    {
      begin("classDefinition");
      while (oClassModifiers());
      if (!oClassDef()
       && !oInterfaceDef()
       && !oMixinDef()
         ) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  oClassModifiers = ABSTRACT / FINAL / NATIVE / BLTCONFAKE ;
  //=====================================================================
  private boolean oClassModifiers()
    {
      begin("oClassModifiers");
      if (ABSTRACT()) return accept();
      if (FINAL()) return accept();
      if (NATIVE()) return accept();
      if (BLTCONFAKE()) return accept();
      return reject();
    }
  
  //=====================================================================
  //  oClassDef = CLASS ident formalTypeArguments (EXTENDS
  //    objectTypeDeclaration)? (IMPLEMENTS objectTypeDeclaration (COMMA
  //    objectTypeDeclaration)*)? LWING memberDefinition* RWING ;
  //=====================================================================
  private boolean oClassDef()
    {
      begin("oClassDef");
      if (!CLASS()) return reject();
      if (!ident()) return reject();
      formalTypeArguments();
      oClassDef_0();
      oClassDef_1();
      if (!LWING()) return reject();
      while (memberDefinition());
      if (!RWING()) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  oClassDef_0 = EXTENDS objectTypeDeclaration
  //-------------------------------------------------------------------
  private boolean oClassDef_0()
    {
      begin("");
      if (!EXTENDS()) return rejectInner();
      objectTypeDeclaration();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  oClassDef_1 = IMPLEMENTS objectTypeDeclaration (COMMA
  //    objectTypeDeclaration)*
  //-------------------------------------------------------------------
  private boolean oClassDef_1()
    {
      begin("");
      if (!IMPLEMENTS()) return rejectInner();
      objectTypeDeclaration();
      while (oClassDef_2());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  oClassDef_2 = COMMA objectTypeDeclaration
  //-------------------------------------------------------------------
  private boolean oClassDef_2()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      objectTypeDeclaration();
      return acceptInner();
    }
  
  //=====================================================================
  //  oInterfaceDef = INTERFACE ident formalTypeArguments (IMPLEMENTS
  //    objectTypeDeclaration (COMMA objectTypeDeclaration)*)? LWING
  //    memberDefinition* RWING ;
  //=====================================================================
  private boolean oInterfaceDef()
    {
      begin("oInterfaceDef");
      if (!INTERFACE()) return reject();
      if (!ident()) return reject();
      formalTypeArguments();
      oClassDef_1();
      if (!LWING()) return reject();
      while (memberDefinition());
      if (!RWING()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  oMixinDef = MIXIN ident formalTypeArguments LWING memberDefinition*
  //    RWING ;
  //=====================================================================
  private boolean oMixinDef()
    {
      begin("oMixinDef");
      if (!MIXIN()) return reject();
      if (!ident()) return reject();
      formalTypeArguments();
      if (!LWING()) return reject();
      while (memberDefinition());
      if (!RWING()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  memberDefinition = oMemberDefinitionModifiers* CONST ident (COLON
  //    typeDeclaration)? (ASSIGN assignExpr)? SEMI /
  //    oMemberDefinitionModifiers* FUNCTION functionDefinition /
  //    oMemberDefinitionModifiers* VAR ident (COLON typeDeclaration)?
  //    (ASSIGN assignExpr)? SEMI ;
  //=====================================================================
  private boolean memberDefinition()
    {
      begin("memberDefinition");
      if (memberDefinition_0()) return accept();
      if (memberDefinition_1()) return accept();
      if (memberDefinition_2()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  memberDefinition_0 = oMemberDefinitionModifiers* CONST ident
  //    (COLON typeDeclaration)? (ASSIGN assignExpr)? SEMI
  //-------------------------------------------------------------------
  private boolean memberDefinition_0()
    {
      begin("");
      while (oMemberDefinitionModifiers());
      if (!CONST()) return rejectInner();
      if (!ident()) return rejectInner();
      memberDefinition_3();
      memberDefinition_4();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  memberDefinition_1 = oMemberDefinitionModifiers* FUNCTION
  //    functionDefinition
  //-------------------------------------------------------------------
  private boolean memberDefinition_1()
    {
      begin("");
      while (oMemberDefinitionModifiers());
      if (!FUNCTION()) return rejectInner();
      if (!functionDefinition()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  memberDefinition_2 = oMemberDefinitionModifiers* VAR ident (COLON
  //    typeDeclaration)? (ASSIGN assignExpr)? SEMI
  //-------------------------------------------------------------------
  private boolean memberDefinition_2()
    {
      begin("");
      while (oMemberDefinitionModifiers());
      if (!VAR()) return rejectInner();
      if (!ident()) return rejectInner();
      memberDefinition_3();
      memberDefinition_4();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  memberDefinition_3 = COLON typeDeclaration
  //-------------------------------------------------------------------
  private boolean memberDefinition_3()
    {
      begin("");
      if (!COLON()) return rejectInner();
      typeDeclaration();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  memberDefinition_4 = ASSIGN assignExpr
  //-------------------------------------------------------------------
  private boolean memberDefinition_4()
    {
      begin("");
      if (!ASSIGN()) return rejectInner();
      if (!assignExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  oMemberDefinitionModifiers = STATIC / ABSTRACT / OVERRIDE / FINAL /
  //    NATIVE / BLTCONREADONLY / INLINE / BLTCONPURE ;
  //=====================================================================
  private boolean oMemberDefinitionModifiers()
    {
      begin("oMemberDefinitionModifiers");
      if (STATIC()) return accept();
      if (ABSTRACT()) return accept();
      if (OVERRIDE()) return accept();
      if (FINAL()) return accept();
      if (NATIVE()) return accept();
      if (BLTCONREADONLY()) return accept();
      if (INLINE()) return accept();
      if (BLTCONPURE()) return accept();
      return reject();
    }
  
  //=====================================================================
  //  functionDefinition = CONSTRUCTOR formalTypeArguments LPAR
  //    functionArgumentsExpr LWING initializeBlock / ident
  //    formalTypeArguments LPAR functionArgumentsExpr COLON
  //    typeDeclaration (SEMI / LWING block) ;
  //=====================================================================
  private boolean functionDefinition()
    {
      begin("functionDefinition");
      if (functionDefinition_0()) return accept();
      if (functionDefinition_1()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  functionDefinition_0 = CONSTRUCTOR formalTypeArguments LPAR
  //    functionArgumentsExpr LWING initializeBlock
  //-------------------------------------------------------------------
  private boolean functionDefinition_0()
    {
      begin("");
      if (!CONSTRUCTOR()) return rejectInner();
      formalTypeArguments();
      if (!LPAR()) return rejectInner();
      if (!functionArgumentsExpr()) return rejectInner();
      if (!LWING()) return rejectInner();
      if (!initializeBlock()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  functionDefinition_1 = ident formalTypeArguments LPAR
  //    functionArgumentsExpr COLON typeDeclaration (SEMI / LWING
  //    block)
  //-------------------------------------------------------------------
  private boolean functionDefinition_1()
    {
      begin("");
      if (!ident()) return rejectInner();
      formalTypeArguments();
      if (!LPAR()) return rejectInner();
      if (!functionArgumentsExpr()) return rejectInner();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      if (!SEMI()
       && !functionDefinition_2()
         ) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  functionDefinition_2 = LWING block
  //-------------------------------------------------------------------
  private boolean functionDefinition_2()
    {
      begin("");
      if (!LWING()) return rejectInner();
      if (!block()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  formalTypeArguments = (DOT LT ident (COMMA ident)* GT)? ;
  //=====================================================================
  private boolean formalTypeArguments()
    {
      begin("formalTypeArguments");
      formalTypeArguments_0();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  formalTypeArguments_0 = DOT LT ident (COMMA ident)* GT
  //-------------------------------------------------------------------
  private boolean formalTypeArguments_0()
    {
      begin("");
      if (!DOT()) return rejectInner();
      if (!LT()) return rejectInner();
      if (!ident()) return rejectInner();
      while (importStatement_2());
      if (!GT()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  actualTypeArguments = (DOT LT typeDeclaration (COMMA
  //    typeDeclaration)* GT)? ;
  //=====================================================================
  private boolean actualTypeArguments()
    {
      begin("actualTypeArguments");
      actualTypeArguments_0();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  actualTypeArguments_0 = DOT LT typeDeclaration (COMMA
  //    typeDeclaration)* GT
  //-------------------------------------------------------------------
  private boolean actualTypeArguments_0()
    {
      begin("");
      if (!DOT()) return rejectInner();
      if (!LT()) return rejectInner();
      typeDeclaration();
      while (actualTypeArguments_1());
      if (!GT()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  actualTypeArguments_1 = COMMA typeDeclaration
  //-------------------------------------------------------------------
  private boolean actualTypeArguments_1()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      typeDeclaration();
      return acceptInner();
    }
  
  //=====================================================================
  //  typeDeclaration = VOID / typeDeclarationNoArrayNoVoid (LBRA RBRA)?
  //    ;
  //=====================================================================
  private boolean typeDeclaration()
    {
      begin("typeDeclaration");
      if (VOID()) return accept();
      if (typeDeclaration_0()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  typeDeclaration_0 = typeDeclarationNoArrayNoVoid (LBRA RBRA)?
  //-------------------------------------------------------------------
  private boolean typeDeclaration_0()
    {
      begin("");
      typeDeclarationNoArrayNoVoid();
      typeDeclaration_1();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  typeDeclaration_1 = LBRA RBRA
  //-------------------------------------------------------------------
  private boolean typeDeclaration_1()
    {
      begin("");
      if (!LBRA()) return rejectInner();
      if (!RBRA()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  typeDeclarationNoArrayNoVoid = MAYBEUNDEFINED / NULLABLE
  //    nullableTypeDeclaration / VARIANT / primaryTypeDeclaration ;
  //=====================================================================
  private boolean typeDeclarationNoArrayNoVoid()
    {
      begin("typeDeclarationNoArrayNoVoid");
      if (MAYBEUNDEFINED()) return accept();
      if (typeDeclarationNoArrayNoVoid_0()) return accept();
      if (VARIANT()) return accept();
      if (primaryTypeDeclaration()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  typeDeclarationNoArrayNoVoid_0 = NULLABLE
  //    nullableTypeDeclaration
  //-------------------------------------------------------------------
  private boolean typeDeclarationNoArrayNoVoid_0()
    {
      begin("");
      if (!NULLABLE()) return rejectInner();
      if (!nullableTypeDeclaration()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  nullableTypeDeclaration = DOT LT typeDeclaration GT ;
  //=====================================================================
  private boolean nullableTypeDeclaration()
    {
      begin("nullableTypeDeclaration");
      if (!DOT()) return reject();
      if (!LT()) return reject();
      typeDeclaration();
      if (!GT()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  primaryTypeDeclaration = LPAR lightFunctionTypeDeclaration /
  //    FUNCTION functionTypeDeclaration / BOOLEAN / INT / NUMBER /
  //    STRING / objectTypeDeclaration ;
  //=====================================================================
  private boolean primaryTypeDeclaration()
    {
      begin("primaryTypeDeclaration");
      if (primaryTypeDeclaration_0()) return accept();
      if (primaryTypeDeclaration_1()) return accept();
      if (BOOLEAN()) return accept();
      if (INT()) return accept();
      if (NUMBER()) return accept();
      if (STRING()) return accept();
      if (objectTypeDeclaration()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  primaryTypeDeclaration_0 = LPAR lightFunctionTypeDeclaration
  //-------------------------------------------------------------------
  private boolean primaryTypeDeclaration_0()
    {
      begin("");
      if (!LPAR()) return rejectInner();
      if (!lightFunctionTypeDeclaration()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  primaryTypeDeclaration_1 = FUNCTION functionTypeDeclaration
  //-------------------------------------------------------------------
  private boolean primaryTypeDeclaration_1()
    {
      begin("");
      if (!FUNCTION()) return rejectInner();
      if (!functionTypeDeclaration()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  objectTypeDeclaration = ((SUPER / ident) actualTypeArguments)? (DOT
  //    ident)? actualTypeArguments ;
  //=====================================================================
  private boolean objectTypeDeclaration()
    {
      begin("objectTypeDeclaration");
      objectTypeDeclaration_0();
      objectTypeDeclaration_1();
      actualTypeArguments();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  objectTypeDeclaration_0 = (SUPER / ident) actualTypeArguments
  //-------------------------------------------------------------------
  private boolean objectTypeDeclaration_0()
    {
      begin("");
      if (!SUPER()
       && !ident()
         ) return rejectInner();
      actualTypeArguments();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  objectTypeDeclaration_1 = DOT ident
  //-------------------------------------------------------------------
  private boolean objectTypeDeclaration_1()
    {
      begin("");
      if (!DOT()) return rejectInner();
      if (!ident()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  lightFunctionTypeDeclaration = ARGS? typeDeclaration (COMMA ARGS?
  //    typeDeclaration)* RPAR ARROW typeDeclaration ;
  //=====================================================================
  private boolean lightFunctionTypeDeclaration()
    {
      begin("lightFunctionTypeDeclaration");
      ARGS();
      typeDeclaration();
      while (lightFunctionTypeDeclaration_0());
      if (!RPAR()) return reject();
      if (!ARROW()) return reject();
      typeDeclaration();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  lightFunctionTypeDeclaration_0 = COMMA ARGS? typeDeclaration
  //-------------------------------------------------------------------
  private boolean lightFunctionTypeDeclaration_0()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      ARGS();
      typeDeclaration();
      return acceptInner();
    }
  
  //=====================================================================
  //  functionTypeDeclaration = ident? LPAR RPAR COLON typeDeclaration /
  //    ident? LPAR ARGS ident? COLON typeDeclaration RPAR COLON
  //    typeDeclaration / ident? LPAR ident? COLON typeDeclaration (COMMA
  //    ident? COLON typeDeclaration)* COMMA ARGS ident? COLON
  //    typeDeclaration RPAR COLON typeDeclaration / ident? LPAR ident?
  //    COLON typeDeclaration (COMMA ident? COLON typeDeclaration)* RPAR
  //    COLON typeDeclaration ;
  //=====================================================================
  private boolean functionTypeDeclaration()
    {
      begin("functionTypeDeclaration");
      if (functionTypeDeclaration_0()) return accept();
      if (functionTypeDeclaration_1()) return accept();
      if (functionTypeDeclaration_2()) return accept();
      if (functionTypeDeclaration_3()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  functionTypeDeclaration_0 = ident? LPAR RPAR COLON
  //    typeDeclaration
  //-------------------------------------------------------------------
  private boolean functionTypeDeclaration_0()
    {
      begin("");
      ident();
      if (!LPAR()) return rejectInner();
      if (!RPAR()) return rejectInner();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  functionTypeDeclaration_1 = ident? LPAR ARGS ident? COLON
  //    typeDeclaration RPAR COLON typeDeclaration
  //-------------------------------------------------------------------
  private boolean functionTypeDeclaration_1()
    {
      begin("");
      ident();
      if (!LPAR()) return rejectInner();
      if (!ARGS()) return rejectInner();
      ident();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      if (!RPAR()) return rejectInner();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  functionTypeDeclaration_2 = ident? LPAR ident? COLON
  //    typeDeclaration (COMMA ident? COLON typeDeclaration)* COMMA
  //    ARGS ident? COLON typeDeclaration RPAR COLON typeDeclaration
  //-------------------------------------------------------------------
  private boolean functionTypeDeclaration_2()
    {
      begin("");
      ident();
      if (!LPAR()) return rejectInner();
      ident();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      while (functionTypeDeclaration_4());
      if (!COMMA()) return rejectInner();
      if (!ARGS()) return rejectInner();
      ident();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      if (!RPAR()) return rejectInner();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  functionTypeDeclaration_3 = ident? LPAR ident? COLON
  //    typeDeclaration (COMMA ident? COLON typeDeclaration)* RPAR
  //    COLON typeDeclaration
  //-------------------------------------------------------------------
  private boolean functionTypeDeclaration_3()
    {
      begin("");
      ident();
      if (!LPAR()) return rejectInner();
      ident();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      while (functionTypeDeclaration_4());
      if (!RPAR()) return rejectInner();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  functionTypeDeclaration_4 = COMMA ident? COLON typeDeclaration
  //-------------------------------------------------------------------
  private boolean functionTypeDeclaration_4()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      ident();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      return acceptInner();
    }
  
  //=====================================================================
  //  initializeBlock = constructorInvocationStatement* block ;
  //=====================================================================
  private boolean initializeBlock()
    {
      begin("initializeBlock");
      while (constructorInvocationStatement());
      if (!block()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  block = statement* RWING ;
  //=====================================================================
  private boolean block()
    {
      begin("block");
      while (statement());
      if (!RWING()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  statement = SEMI / VAR variableStatement / IF ifStatement /
  //    CONTINUE continueStatement / BREAK breakStatement / RETURN
  //    returnStatement / THROW throwStatement / TRY tryStatement /
  //    ASSERT assertStatement / LOG logStatement / DELETE
  //    deleteStatement / DEBUGGER / FUNCTION functionStatement / VOID /
  //    LWING block / (ident COLON)? DO doWhileStatement / (ident COLON)?
  //    WHILE whileStatement / (ident COLON)? FOR forStatement / (ident
  //    COLON)? SWITCH switchStatement / expr SEMI ;
  //=====================================================================
  private boolean statement()
    {
      begin("statement");
      if (SEMI()) return accept();
      if (statement_0()) return accept();
      if (statement_1()) return accept();
      if (statement_2()) return accept();
      if (statement_3()) return accept();
      if (statement_4()) return accept();
      if (statement_5()) return accept();
      if (statement_6()) return accept();
      if (statement_7()) return accept();
      if (statement_8()) return accept();
      if (statement_9()) return accept();
      if (DEBUGGER()) return accept();
      if (statement_10()) return accept();
      if (VOID()) return accept();
      if (functionDefinition_2()) return accept();
      if (statement_11()) return accept();
      if (statement_12()) return accept();
      if (statement_13()) return accept();
      if (statement_14()) return accept();
      if (statement_15()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  statement_0 = VAR variableStatement
  //-------------------------------------------------------------------
  private boolean statement_0()
    {
      begin("");
      if (!VAR()) return rejectInner();
      if (!variableStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_1 = IF ifStatement
  //-------------------------------------------------------------------
  private boolean statement_1()
    {
      begin("");
      if (!IF()) return rejectInner();
      if (!ifStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_2 = CONTINUE continueStatement
  //-------------------------------------------------------------------
  private boolean statement_2()
    {
      begin("");
      if (!CONTINUE()) return rejectInner();
      if (!continueStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_3 = BREAK breakStatement
  //-------------------------------------------------------------------
  private boolean statement_3()
    {
      begin("");
      if (!BREAK()) return rejectInner();
      if (!breakStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_4 = RETURN returnStatement
  //-------------------------------------------------------------------
  private boolean statement_4()
    {
      begin("");
      if (!RETURN()) return rejectInner();
      if (!returnStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_5 = THROW throwStatement
  //-------------------------------------------------------------------
  private boolean statement_5()
    {
      begin("");
      if (!THROW()) return rejectInner();
      if (!throwStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_6 = TRY tryStatement
  //-------------------------------------------------------------------
  private boolean statement_6()
    {
      begin("");
      if (!TRY()) return rejectInner();
      if (!tryStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_7 = ASSERT assertStatement
  //-------------------------------------------------------------------
  private boolean statement_7()
    {
      begin("");
      if (!ASSERT()) return rejectInner();
      if (!assertStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_8 = LOG logStatement
  //-------------------------------------------------------------------
  private boolean statement_8()
    {
      begin("");
      if (!LOG()) return rejectInner();
      if (!logStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_9 = DELETE deleteStatement
  //-------------------------------------------------------------------
  private boolean statement_9()
    {
      begin("");
      if (!DELETE()) return rejectInner();
      if (!deleteStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_10 = FUNCTION functionStatement
  //-------------------------------------------------------------------
  private boolean statement_10()
    {
      begin("");
      if (!FUNCTION()) return rejectInner();
      if (!functionStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_11 = (ident COLON)? DO doWhileStatement
  //-------------------------------------------------------------------
  private boolean statement_11()
    {
      begin("");
      statement_16();
      if (!DO()) return rejectInner();
      if (!doWhileStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_12 = (ident COLON)? WHILE whileStatement
  //-------------------------------------------------------------------
  private boolean statement_12()
    {
      begin("");
      statement_16();
      if (!WHILE()) return rejectInner();
      if (!whileStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_13 = (ident COLON)? FOR forStatement
  //-------------------------------------------------------------------
  private boolean statement_13()
    {
      begin("");
      statement_16();
      if (!FOR()) return rejectInner();
      if (!forStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_14 = (ident COLON)? SWITCH switchStatement
  //-------------------------------------------------------------------
  private boolean statement_14()
    {
      begin("");
      statement_16();
      if (!SWITCH()) return rejectInner();
      if (!switchStatement()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_15 = expr SEMI
  //-------------------------------------------------------------------
  private boolean statement_15()
    {
      begin("");
      if (!expr()) return rejectInner();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  statement_16 = ident COLON
  //-------------------------------------------------------------------
  private boolean statement_16()
    {
      begin("");
      if (!ident()) return rejectInner();
      if (!COLON()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  constructorInvocationStatement = (SUPER / THIS /
  //    objectTypeDeclaration) LPAR argsExpr SEMI ;
  //=====================================================================
  private boolean constructorInvocationStatement()
    {
      begin("constructorInvocationStatement");
      if (!SUPER()
       && !THIS()
       && !objectTypeDeclaration()
         ) return reject();
      if (!LPAR()) return reject();
      if (!argsExpr()) return reject();
      if (!SEMI()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  variableStatement = variableDeclarations SEMI ;
  //=====================================================================
  private boolean variableStatement()
    {
      begin("variableStatement");
      if (!variableDeclarations()) return reject();
      if (!SEMI()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  functionStatement = ident functionExpr ;
  //=====================================================================
  private boolean functionStatement()
    {
      begin("functionStatement");
      if (!ident()) return reject();
      if (!functionExpr()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  ifStatement = LPAR expr RPAR subStatements (ELSE subStatements)? ;
  //=====================================================================
  private boolean ifStatement()
    {
      begin("ifStatement");
      if (!LPAR()) return reject();
      if (!expr()) return reject();
      if (!RPAR()) return reject();
      if (!subStatements()) return reject();
      ifStatement_0();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  ifStatement_0 = ELSE subStatements
  //-------------------------------------------------------------------
  private boolean ifStatement_0()
    {
      begin("");
      if (!ELSE()) return rejectInner();
      if (!subStatements()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  doWhileStatement = subStatements WHILE LPAR expr RPAR ;
  //=====================================================================
  private boolean doWhileStatement()
    {
      begin("doWhileStatement");
      if (!subStatements()) return reject();
      if (!WHILE()) return reject();
      if (!LPAR()) return reject();
      if (!expr()) return reject();
      if (!RPAR()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  whileStatement = LPAR expr RPAR subStatements ;
  //=====================================================================
  private boolean whileStatement()
    {
      begin("whileStatement");
      if (!LPAR()) return reject();
      if (!expr()) return reject();
      if (!RPAR()) return reject();
      if (!subStatements()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  forStatement = forInStatement / LPAR (expr / VAR
  //    variableDeclarations)? SEMI expr? SEMI expr? RPAR subStatements
  //    ;
  //=====================================================================
  private boolean forStatement()
    {
      begin("forStatement");
      if (forInStatement()) return accept();
      if (forStatement_0()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  forStatement_0 = LPAR (expr / VAR variableDeclarations)? SEMI
  //    expr? SEMI expr? RPAR subStatements
  //-------------------------------------------------------------------
  private boolean forStatement_0()
    {
      begin("");
      if (!LPAR()) return rejectInner();
      forStatement_1();
      if (!SEMI()) return rejectInner();
      expr();
      if (!SEMI()) return rejectInner();
      expr();
      if (!RPAR()) return rejectInner();
      if (!subStatements()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  forStatement_1 = expr / VAR variableDeclarations
  //-------------------------------------------------------------------
  private boolean forStatement_1()
    {
      begin("");
      if (expr()) return acceptInner();
      if (forStatement_2()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  forStatement_2 = VAR variableDeclarations
  //-------------------------------------------------------------------
  private boolean forStatement_2()
    {
      begin("");
      if (!VAR()) return rejectInner();
      if (!variableDeclarations()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  forInStatement = LPAR (VAR variableDeclaration / lhsExpr) IN expr
  //    RPAR subStatements ;
  //=====================================================================
  private boolean forInStatement()
    {
      begin("forInStatement");
      if (!LPAR()) return reject();
      if (!forInStatement_0()
       && !lhsExpr()
         ) return reject();
      if (!IN()) return reject();
      if (!expr()) return reject();
      if (!RPAR()) return reject();
      if (!subStatements()) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  forInStatement_0 = VAR variableDeclaration
  //-------------------------------------------------------------------
  private boolean forInStatement_0()
    {
      begin("");
      if (!VAR()) return rejectInner();
      if (!variableDeclaration()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  continueStatement = ident? SEMI ;
  //=====================================================================
  private boolean continueStatement()
    {
      begin("continueStatement");
      ident();
      if (!SEMI()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  breakStatement = ident? SEMI ;
  //=====================================================================
  private boolean breakStatement()
    {
      begin("breakStatement");
      ident();
      if (!SEMI()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  returnStatement = SEMI / expr SEMI ;
  //=====================================================================
  private boolean returnStatement()
    {
      begin("returnStatement");
      if (SEMI()) return accept();
      if (statement_15()) return accept();
      return reject();
    }
  
  //=====================================================================
  //  switchStatement = LPAR expr RPAR LWING ((CASE expr COLON / DEFAULT
  //    COLON) statement*)* RWING ;
  //=====================================================================
  private boolean switchStatement()
    {
      begin("switchStatement");
      if (!LPAR()) return reject();
      if (!expr()) return reject();
      if (!RPAR()) return reject();
      if (!LWING()) return reject();
      while (switchStatement_0());
      if (!RWING()) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  switchStatement_0 = (CASE expr COLON / DEFAULT COLON) statement*
  //-------------------------------------------------------------------
  private boolean switchStatement_0()
    {
      begin("");
      if (!switchStatement_1()
       && !switchStatement_2()
         ) return rejectInner();
      while (statement());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  switchStatement_1 = CASE expr COLON
  //-------------------------------------------------------------------
  private boolean switchStatement_1()
    {
      begin("");
      if (!CASE()) return rejectInner();
      if (!expr()) return rejectInner();
      if (!COLON()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  switchStatement_2 = DEFAULT COLON
  //-------------------------------------------------------------------
  private boolean switchStatement_2()
    {
      begin("");
      if (!DEFAULT()) return rejectInner();
      if (!COLON()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  throwStatement = expr ;
  //=====================================================================
  private boolean throwStatement()
    {
      begin("throwStatement");
      if (!expr()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  tryStatement = LWING block (CATCH LPAR ident COLON typeDeclaration
  //    RPAR LWING block)* (FINALLY LWING block)? ;
  //=====================================================================
  private boolean tryStatement()
    {
      begin("tryStatement");
      if (!LWING()) return reject();
      if (!block()) return reject();
      while (tryStatement_0());
      tryStatement_1();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  tryStatement_0 = CATCH LPAR ident COLON typeDeclaration RPAR
  //    LWING block
  //-------------------------------------------------------------------
  private boolean tryStatement_0()
    {
      begin("");
      if (!CATCH()) return rejectInner();
      if (!LPAR()) return rejectInner();
      if (!ident()) return rejectInner();
      if (!COLON()) return rejectInner();
      typeDeclaration();
      if (!RPAR()) return rejectInner();
      if (!LWING()) return rejectInner();
      if (!block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  tryStatement_1 = FINALLY LWING block
  //-------------------------------------------------------------------
  private boolean tryStatement_1()
    {
      begin("");
      if (!FINALLY()) return rejectInner();
      if (!LWING()) return rejectInner();
      if (!block()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  assertStatement = expr SEMI ;
  //=====================================================================
  private boolean assertStatement()
    {
      begin("assertStatement");
      if (!expr()) return reject();
      if (!SEMI()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  logStatement = assignExpr (COMMA assignExpr)* SEMI ;
  //=====================================================================
  private boolean logStatement()
    {
      begin("logStatement");
      if (!assignExpr()) return reject();
      while (logStatement_0());
      if (!SEMI()) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  logStatement_0 = COMMA assignExpr
  //-------------------------------------------------------------------
  private boolean logStatement_0()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      if (!assignExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  deleteStatement = expr SEMI ;
  //=====================================================================
  private boolean deleteStatement()
    {
      begin("deleteStatement");
      if (!expr()) return reject();
      if (!SEMI()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  subStatements = statement ;
  //=====================================================================
  private boolean subStatements()
    {
      begin("subStatements");
      if (!statement()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  variableDeclarations = variableDeclaration (COMMA
  //    variableDeclaration)* ;
  //=====================================================================
  private boolean variableDeclarations()
    {
      begin("variableDeclarations");
      if (!variableDeclaration()) return reject();
      while (variableDeclarations_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  variableDeclarations_0 = COMMA variableDeclaration
  //-------------------------------------------------------------------
  private boolean variableDeclarations_0()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      if (!variableDeclaration()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  variableDeclaration = ident (COLON typeDeclaration)? (ASSIGN
  //    assignExpr)? ;
  //=====================================================================
  private boolean variableDeclaration()
    {
      begin("variableDeclaration");
      if (!ident()) return reject();
      memberDefinition_3();
      memberDefinition_4();
      return accept();
    }
  
  //=====================================================================
  //  expr = assignExpr (COMMA assignExpr)* ;
  //=====================================================================
  private boolean expr()
    {
      begin("expr");
      if (!assignExpr()) return reject();
      while (logStatement_0());
      return accept();
    }
  
  //=====================================================================
  //  assignExpr = lhsExpr oAssignExprOpe assignExpr / condExpr ;
  //=====================================================================
  private boolean assignExpr()
    {
      begin("assignExpr");
      if (assignExpr_0()) return accept();
      if (condExpr()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  assignExpr_0 = lhsExpr oAssignExprOpe assignExpr
  //-------------------------------------------------------------------
  private boolean assignExpr_0()
    {
      begin("");
      if (!lhsExpr()) return rejectInner();
      if (!oAssignExprOpe()) return rejectInner();
      if (!assignExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  oAssignExprOpe = ASSIGN / MULEQ / DIVEQ / SUREQ / ADDEQ / SUBEQ /
  //    UNSIGNEDRSHIFTEQ / LSHIFTEQ / RSHIFTEQ / BITANDEQ / XOREQ /
  //    BITOREQ ;
  //=====================================================================
  private boolean oAssignExprOpe()
    {
      begin("oAssignExprOpe");
      if (ASSIGN()) return accept();
      if (MULEQ()) return accept();
      if (DIVEQ()) return accept();
      if (SUREQ()) return accept();
      if (ADDEQ()) return accept();
      if (SUBEQ()) return accept();
      if (UNSIGNEDRSHIFTEQ()) return accept();
      if (LSHIFTEQ()) return accept();
      if (RSHIFTEQ()) return accept();
      if (BITANDEQ()) return accept();
      if (XOREQ()) return accept();
      if (BITOREQ()) return accept();
      return reject();
    }
  
  //=====================================================================
  //  condExpr = lorExpr (COND assignExpr? COLON assignExpr)? ;
  //=====================================================================
  private boolean condExpr()
    {
      begin("condExpr");
      if (!lorExpr()) return reject();
      condExpr_0();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  condExpr_0 = COND assignExpr? COLON assignExpr
  //-------------------------------------------------------------------
  private boolean condExpr_0()
    {
      begin("");
      if (!COND()) return rejectInner();
      assignExpr();
      if (!COLON()) return rejectInner();
      if (!assignExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  lorExpr = landExpr (OR landExpr)* ;
  //=====================================================================
  private boolean lorExpr()
    {
      begin("lorExpr");
      if (!landExpr()) return reject();
      while (lorExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  lorExpr_0 = OR landExpr
  //-------------------------------------------------------------------
  private boolean lorExpr_0()
    {
      begin("");
      if (!OR()) return rejectInner();
      if (!landExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  landExpr = borExpr (AND borExpr)* ;
  //=====================================================================
  private boolean landExpr()
    {
      begin("landExpr");
      if (!borExpr()) return reject();
      while (landExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  landExpr_0 = AND borExpr
  //-------------------------------------------------------------------
  private boolean landExpr_0()
    {
      begin("");
      if (!AND()) return rejectInner();
      if (!borExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  borExpr = bxorExpr (!OR BITOR bxorExpr)* ;
  //=====================================================================
  private boolean borExpr()
    {
      begin("borExpr");
      if (!bxorExpr()) return reject();
      while (borExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  borExpr_0 = !OR BITOR bxorExpr
  //-------------------------------------------------------------------
  private boolean borExpr_0()
    {
      begin("");
      if (!borExpr_1()) return rejectInner();
      if (!BITOR()) return rejectInner();
      if (!bxorExpr()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  borExpr_1 = !OR
  //-------------------------------------------------------------------
  private boolean borExpr_1()
    {
      begin("","not OR");
      if (OR()) return rejectNot();
      return acceptNot();
    }
  
  //=====================================================================
  //  bxorExpr = bandExpr (XOR bandExpr)* ;
  //=====================================================================
  private boolean bxorExpr()
    {
      begin("bxorExpr");
      if (!bandExpr()) return reject();
      while (bxorExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  bxorExpr_0 = XOR bandExpr
  //-------------------------------------------------------------------
  private boolean bxorExpr_0()
    {
      begin("");
      if (!XOR()) return rejectInner();
      if (!bandExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  bandExpr = eqExpr (!AND BITAND eqExpr)* ;
  //=====================================================================
  private boolean bandExpr()
    {
      begin("bandExpr");
      if (!eqExpr()) return reject();
      while (bandExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  bandExpr_0 = !AND BITAND eqExpr
  //-------------------------------------------------------------------
  private boolean bandExpr_0()
    {
      begin("");
      if (!bandExpr_1()) return rejectInner();
      if (!BITAND()) return rejectInner();
      if (!eqExpr()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  bandExpr_1 = !AND
  //-------------------------------------------------------------------
  private boolean bandExpr_1()
    {
      begin("","not AND");
      if (AND()) return rejectNot();
      return acceptNot();
    }
  
  //=====================================================================
  //  eqExpr = relExpr ((EQ / NOTEQ) relExpr)* ;
  //=====================================================================
  private boolean eqExpr()
    {
      begin("eqExpr");
      if (!relExpr()) return reject();
      while (eqExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  eqExpr_0 = (EQ / NOTEQ) relExpr
  //-------------------------------------------------------------------
  private boolean eqExpr_0()
    {
      begin("");
      if (!EQ()
       && !NOTEQ()
         ) return rejectInner();
      if (!relExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  relExpr = shiftExpr ((LTEQ / GTEQ / LT / GT / IN) shiftExpr)* ;
  //=====================================================================
  private boolean relExpr()
    {
      begin("relExpr");
      if (!shiftExpr()) return reject();
      while (relExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  relExpr_0 = (LTEQ / GTEQ / LT / GT / IN) shiftExpr
  //-------------------------------------------------------------------
  private boolean relExpr_0()
    {
      begin("");
      if (!LTEQ()
       && !GTEQ()
       && !LT()
       && !GT()
       && !IN()
         ) return rejectInner();
      if (!shiftExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  shiftExpr = addExpr ((UNSIGNEDRSHIFT / LSHIFT / RSHIFT) addExpr)*
  //    ;
  //=====================================================================
  private boolean shiftExpr()
    {
      begin("shiftExpr");
      if (!addExpr()) return reject();
      while (shiftExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  shiftExpr_0 = (UNSIGNEDRSHIFT / LSHIFT / RSHIFT) addExpr
  //-------------------------------------------------------------------
  private boolean shiftExpr_0()
    {
      begin("");
      if (!UNSIGNEDRSHIFT()
       && !LSHIFT()
       && !RSHIFT()
         ) return rejectInner();
      if (!addExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  addExpr = mulExpr (!INC !DEC (ADD / SUB) mulExpr)* ;
  //=====================================================================
  private boolean addExpr()
    {
      begin("addExpr");
      if (!mulExpr()) return reject();
      while (addExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  addExpr_0 = !INC !DEC (ADD / SUB) mulExpr
  //-------------------------------------------------------------------
  private boolean addExpr_0()
    {
      begin("");
      if (!addExpr_1()) return rejectInner();
      if (!addExpr_2()) return rejectInner();
      if (!ADD()
       && !SUB()
         ) return rejectInner();
      if (!mulExpr()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  addExpr_1 = !INC
  //-------------------------------------------------------------------
  private boolean addExpr_1()
    {
      begin("","not INC");
      if (INC()) return rejectNot();
      return acceptNot();
    }
  
  //-------------------------------------------------------------------
  //  addExpr_2 = !DEC
  //-------------------------------------------------------------------
  private boolean addExpr_2()
    {
      begin("","not DEC");
      if (DEC()) return rejectNot();
      return acceptNot();
    }
  
  //=====================================================================
  //  mulExpr = unaryExpr ((MUL / DIV / SUR) unaryExpr)* ;
  //=====================================================================
  private boolean mulExpr()
    {
      begin("mulExpr");
      if (!unaryExpr()) return reject();
      while (mulExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  mulExpr_0 = (MUL / DIV / SUR) unaryExpr
  //-------------------------------------------------------------------
  private boolean mulExpr_0()
    {
      begin("");
      if (!MUL()
       && !DIV()
       && !SUR()
         ) return rejectInner();
      if (!unaryExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  unaryExpr = (INC / DEC / ADD / SUB / NOT / TYPEOF) unaryExpr /
  //    asExpr ;
  //=====================================================================
  private boolean unaryExpr()
    {
      begin("unaryExpr");
      if (unaryExpr_0()) return accept();
      if (asExpr()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  unaryExpr_0 = (INC / DEC / ADD / SUB / NOT / TYPEOF) unaryExpr
  //-------------------------------------------------------------------
  private boolean unaryExpr_0()
    {
      begin("");
      if (!INC()
       && !DEC()
       && !ADD()
       && !SUB()
       && !NOT()
       && !TYPEOF()
         ) return rejectInner();
      if (!unaryExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  asExpr = postfixExpr (AS BLTCONNOCONVERT? typeDeclaration)* ;
  //=====================================================================
  private boolean asExpr()
    {
      begin("asExpr");
      if (!postfixExpr()) return reject();
      while (asExpr_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  asExpr_0 = AS BLTCONNOCONVERT? typeDeclaration
  //-------------------------------------------------------------------
  private boolean asExpr_0()
    {
      begin("");
      if (!AS()) return rejectInner();
      BLTCONNOCONVERT();
      typeDeclaration();
      return acceptInner();
    }
  
  //=====================================================================
  //  postfixExpr = lhsExpr (INC / DEC / INSTANCEOF typeDeclaration)? ;
  //=====================================================================
  private boolean postfixExpr()
    {
      begin("postfixExpr");
      if (!lhsExpr()) return reject();
      postfixExpr_0();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  postfixExpr_0 = INC / DEC / INSTANCEOF typeDeclaration
  //-------------------------------------------------------------------
  private boolean postfixExpr_0()
    {
      begin("");
      if (INC()) return acceptInner();
      if (DEC()) return acceptInner();
      if (postfixExpr_1()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  postfixExpr_1 = INSTANCEOF typeDeclaration
  //-------------------------------------------------------------------
  private boolean postfixExpr_1()
    {
      begin("");
      if (!INSTANCEOF()) return rejectInner();
      typeDeclaration();
      return acceptInner();
    }
  
  //=====================================================================
  //  lhsExpr = SUPER superExpr / LPAR lambdaExpr oLhsExprSub* / FUNCTION
  //    functionExpr oLhsExprSub* / NEW newExpr oLhsExprSub* /
  //    primaryExpr oLhsExprSub* ;
  //=====================================================================
  private boolean lhsExpr()
    {
      begin("lhsExpr");
      if (lhsExpr_0()) return accept();
      if (lhsExpr_1()) return accept();
      if (lhsExpr_2()) return accept();
      if (lhsExpr_3()) return accept();
      if (lhsExpr_4()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  lhsExpr_0 = SUPER superExpr
  //-------------------------------------------------------------------
  private boolean lhsExpr_0()
    {
      begin("");
      if (!SUPER()) return rejectInner();
      if (!superExpr()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  lhsExpr_1 = LPAR lambdaExpr oLhsExprSub*
  //-------------------------------------------------------------------
  private boolean lhsExpr_1()
    {
      begin("");
      if (!LPAR()) return rejectInner();
      if (!lambdaExpr()) return rejectInner();
      while (oLhsExprSub());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  lhsExpr_2 = FUNCTION functionExpr oLhsExprSub*
  //-------------------------------------------------------------------
  private boolean lhsExpr_2()
    {
      begin("");
      if (!FUNCTION()) return rejectInner();
      if (!functionExpr()) return rejectInner();
      while (oLhsExprSub());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  lhsExpr_3 = NEW newExpr oLhsExprSub*
  //-------------------------------------------------------------------
  private boolean lhsExpr_3()
    {
      begin("");
      if (!NEW()) return rejectInner();
      newExpr();
      while (oLhsExprSub());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  lhsExpr_4 = primaryExpr oLhsExprSub*
  //-------------------------------------------------------------------
  private boolean lhsExpr_4()
    {
      begin("");
      if (!primaryExpr()) return rejectInner();
      while (oLhsExprSub());
      return acceptInner();
    }
  
  //=====================================================================
  //  oLhsExprSub = LPAR argsExpr / LBRA expr RBRA / DOT ident
  //    actualTypeArguments ;
  //=====================================================================
  private boolean oLhsExprSub()
    {
      begin("oLhsExprSub");
      if (oLhsExprSub_0()) return accept();
      if (oLhsExprSub_1()) return accept();
      if (oLhsExprSub_2()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  oLhsExprSub_0 = LPAR argsExpr
  //-------------------------------------------------------------------
  private boolean oLhsExprSub_0()
    {
      begin("");
      if (!LPAR()) return rejectInner();
      if (!argsExpr()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  oLhsExprSub_1 = LBRA expr RBRA
  //-------------------------------------------------------------------
  private boolean oLhsExprSub_1()
    {
      begin("");
      if (!LBRA()) return rejectInner();
      if (!expr()) return rejectInner();
      if (!RBRA()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  oLhsExprSub_2 = DOT ident actualTypeArguments
  //-------------------------------------------------------------------
  private boolean oLhsExprSub_2()
    {
      begin("");
      if (!DOT()) return rejectInner();
      if (!ident()) return rejectInner();
      actualTypeArguments();
      return acceptInner();
    }
  
  //=====================================================================
  //  newExpr = typeDeclarationNoArrayNoVoid (LBRA assignExpr? RBRA)*
  //    (LPAR argsExpr)? ;
  //=====================================================================
  private boolean newExpr()
    {
      begin("newExpr");
      typeDeclarationNoArrayNoVoid();
      while (newExpr_0());
      oLhsExprSub_0();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  newExpr_0 = LBRA assignExpr? RBRA
  //-------------------------------------------------------------------
  private boolean newExpr_0()
    {
      begin("");
      if (!LBRA()) return rejectInner();
      assignExpr();
      if (!RBRA()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  superExpr = DOT ident LPAR argsExpr ;
  //=====================================================================
  private boolean superExpr()
    {
      begin("superExpr");
      if (!DOT()) return reject();
      if (!ident()) return reject();
      if (!LPAR()) return reject();
      if (!argsExpr()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  lambdaExpr = functionArgumentsExpr (COLON typeDeclaration)? ARROW
  //    lambdaBody ;
  //=====================================================================
  private boolean lambdaExpr()
    {
      begin("lambdaExpr");
      if (!functionArgumentsExpr()) return reject();
      memberDefinition_3();
      if (!ARROW()) return reject();
      if (!lambdaBody()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  lambdaBody = LWING block / expr ;
  //=====================================================================
  private boolean lambdaBody()
    {
      begin("lambdaBody");
      if (functionDefinition_2()) return accept();
      if (expr()) return accept();
      return reject();
    }
  
  //=====================================================================
  //  functionExpr = LPAR functionArgumentsExpr COLON? typeDeclaration
  //    LWING block ;
  //=====================================================================
  private boolean functionExpr()
    {
      begin("functionExpr");
      if (!LPAR()) return reject();
      if (!functionArgumentsExpr()) return reject();
      COLON();
      typeDeclaration();
      if (!LWING()) return reject();
      if (!block()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  primaryExpr = THIS / UNDEFINED / NULL nullLiteral / FALSE / TRUE /
  //    LBRA arrayLiteral / LWING hashLiteral / LPAR expr RPAR /
  //    numberLiteral / ident objectTypeDeclaration / string /
  //    regexpLiteral ;
  //=====================================================================
  private boolean primaryExpr()
    {
      begin("primaryExpr");
      if (THIS()) return accept();
      if (UNDEFINED()) return accept();
      if (primaryExpr_0()) return accept();
      if (FALSE()) return accept();
      if (TRUE()) return accept();
      if (primaryExpr_1()) return accept();
      if (primaryExpr_2()) return accept();
      if (primaryExpr_3()) return accept();
      if (numberLiteral()) return accept();
      if (primaryExpr_4()) return accept();
      if (string()) return accept();
      if (regexpLiteral()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  primaryExpr_0 = NULL nullLiteral
  //-------------------------------------------------------------------
  private boolean primaryExpr_0()
    {
      begin("");
      if (!NULL()) return rejectInner();
      nullLiteral();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  primaryExpr_1 = LBRA arrayLiteral
  //-------------------------------------------------------------------
  private boolean primaryExpr_1()
    {
      begin("");
      if (!LBRA()) return rejectInner();
      if (!arrayLiteral()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  primaryExpr_2 = LWING hashLiteral
  //-------------------------------------------------------------------
  private boolean primaryExpr_2()
    {
      begin("");
      if (!LWING()) return rejectInner();
      if (!hashLiteral()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  primaryExpr_3 = LPAR expr RPAR
  //-------------------------------------------------------------------
  private boolean primaryExpr_3()
    {
      begin("");
      if (!LPAR()) return rejectInner();
      if (!expr()) return rejectInner();
      if (!RPAR()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  primaryExpr_4 = ident objectTypeDeclaration
  //-------------------------------------------------------------------
  private boolean primaryExpr_4()
    {
      begin("");
      if (!ident()) return rejectInner();
      objectTypeDeclaration();
      return acceptInner();
    }
  
  //=====================================================================
  //  nullLiteral = (COLON typeDeclaration)? ;
  //=====================================================================
  private boolean nullLiteral()
    {
      begin("nullLiteral");
      memberDefinition_3();
      return accept();
    }
  
  //=====================================================================
  //  arrayLiteral = (assignExpr (COMMA assignExpr)*)? RBRA (COLON
  //    typeDeclaration)? ;
  //=====================================================================
  private boolean arrayLiteral()
    {
      begin("arrayLiteral");
      arrayLiteral_0();
      if (!RBRA()) return reject();
      memberDefinition_3();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  arrayLiteral_0 = assignExpr (COMMA assignExpr)*
  //-------------------------------------------------------------------
  private boolean arrayLiteral_0()
    {
      begin("");
      if (!assignExpr()) return rejectInner();
      while (logStatement_0());
      return acceptInner();
    }
  
  //=====================================================================
  //  hashLiteral = ((ident / numberLiteral / string) COLON assignExpr
  //    (COMMA (ident / numberLiteral / string) COLON assignExpr)*)?
  //    RWING (COLON typeDeclaration)? ;
  //=====================================================================
  private boolean hashLiteral()
    {
      begin("hashLiteral");
      hashLiteral_0();
      if (!RWING()) return reject();
      memberDefinition_3();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  hashLiteral_0 = (ident / numberLiteral / string) COLON assignExpr
  //    (COMMA (ident / numberLiteral / string) COLON assignExpr)*
  //-------------------------------------------------------------------
  private boolean hashLiteral_0()
    {
      begin("");
      if (!ident()
       && !numberLiteral()
       && !string()
         ) return rejectInner();
      if (!COLON()) return rejectInner();
      if (!assignExpr()) return rejectInner();
      while (hashLiteral_1());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  hashLiteral_1 = COMMA (ident / numberLiteral / string) COLON
  //    assignExpr
  //-------------------------------------------------------------------
  private boolean hashLiteral_1()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      if (!ident()
       && !numberLiteral()
       && !string()
         ) return rejectInner();
      if (!COLON()) return rejectInner();
      if (!assignExpr()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  functionArgumentsExpr = RPAR / (ARGS ident / ident)? (COLON
  //    typeDeclaration)? (COMMA (ARGS ident / ident)? (COLON
  //    typeDeclaration)?)* RPAR ;
  //=====================================================================
  private boolean functionArgumentsExpr()
    {
      begin("functionArgumentsExpr");
      if (RPAR()) return accept();
      if (functionArgumentsExpr_0()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  functionArgumentsExpr_0 = (ARGS ident / ident)? (COLON
  //    typeDeclaration)? (COMMA (ARGS ident / ident)? (COLON
  //    typeDeclaration)?)* RPAR
  //-------------------------------------------------------------------
  private boolean functionArgumentsExpr_0()
    {
      begin("");
      functionArgumentsExpr_1();
      memberDefinition_3();
      while (functionArgumentsExpr_2());
      if (!RPAR()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  functionArgumentsExpr_1 = ARGS ident / ident
  //-------------------------------------------------------------------
  private boolean functionArgumentsExpr_1()
    {
      begin("");
      if (functionArgumentsExpr_3()) return acceptInner();
      if (ident()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  functionArgumentsExpr_2 = COMMA (ARGS ident / ident)? (COLON
  //    typeDeclaration)?
  //-------------------------------------------------------------------
  private boolean functionArgumentsExpr_2()
    {
      begin("");
      if (!COMMA()) return rejectInner();
      functionArgumentsExpr_1();
      memberDefinition_3();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  functionArgumentsExpr_3 = ARGS ident
  //-------------------------------------------------------------------
  private boolean functionArgumentsExpr_3()
    {
      begin("");
      if (!ARGS()) return rejectInner();
      if (!ident()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  argsExpr = RPAR / assignExpr (COMMA assignExpr)* RPAR ;
  //=====================================================================
  private boolean argsExpr()
    {
      begin("argsExpr");
      if (RPAR()) return accept();
      if (argsExpr_0()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  argsExpr_0 = assignExpr (COMMA assignExpr)* RPAR
  //-------------------------------------------------------------------
  private boolean argsExpr_0()
    {
      begin("");
      if (!assignExpr()) return rejectInner();
      while (logStatement_0());
      if (!RPAR()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  ident = ([a-z] / [A-Z] / "_") ([a-z] / [A-Z] / "_" / [0-9])*
  //    spacing ;
  //=====================================================================
  private boolean ident()
    {
      begin("ident");
      if (!nextIn('a','z')
       && !nextIn('A','Z')
       && !next('_')
         ) return reject();
      while (ident_0());
      spacing();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  ident_0 = [a-z] / [A-Z] / "_" / [0-9]
  //-------------------------------------------------------------------
  private boolean ident_0()
    {
      begin("");
      if (nextIn('a','z')) return acceptInner();
      if (nextIn('A','Z')) return acceptInner();
      if (next('_')) return acceptInner();
      if (nextIn('0','9')) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  string = doubleQuoted spacing / singleQuoted spacing ;
  //=====================================================================
  private boolean string()
    {
      begin("string");
      if (string_0()) return accept();
      if (string_1()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  string_0 = doubleQuoted spacing
  //-------------------------------------------------------------------
  private boolean string_0()
    {
      begin("");
      if (!doubleQuoted()) return rejectInner();
      spacing();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  string_1 = singleQuoted spacing
  //-------------------------------------------------------------------
  private boolean string_1()
    {
      begin("");
      if (!singleQuoted()) return rejectInner();
      spacing();
      return acceptInner();
    }
  
  //=====================================================================
  //  doubleQuoted = """ ^["\]* ("\" _ (!""" !"\" _)*)* """ ;
  //=====================================================================
  private boolean doubleQuoted()
    {
      begin("doubleQuoted");
      if (!next('"')) return reject();
      while (nextNotIn("\"\\"));
      while (doubleQuoted_0());
      if (!next('"')) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  doubleQuoted_0 = "\" _ (!""" !"\" _)*
  //-------------------------------------------------------------------
  private boolean doubleQuoted_0()
    {
      begin("");
      if (!next('\\')) return rejectInner();
      if (!next()) return rejectInner();
      while (doubleQuoted_1());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  doubleQuoted_1 = !""" !"\" _
  //-------------------------------------------------------------------
  private boolean doubleQuoted_1()
    {
      begin("");
      if (!aheadNot('"')) return rejectInner();
      if (!aheadNot('\\')) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  singleQuoted = "'" (!"'" !"\" _)* ("\" _ (!"'" !"\" _)*)* "'" ;
  //=====================================================================
  private boolean singleQuoted()
    {
      begin("singleQuoted");
      if (!next('\'')) return reject();
      while (singleQuoted_0());
      while (singleQuoted_1());
      if (!next('\'')) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  singleQuoted_0 = !"'" !"\" _
  //-------------------------------------------------------------------
  private boolean singleQuoted_0()
    {
      begin("");
      if (!aheadNot('\'')) return rejectInner();
      if (!aheadNot('\\')) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  singleQuoted_1 = "\" _ (!"'" !"\" _)*
  //-------------------------------------------------------------------
  private boolean singleQuoted_1()
    {
      begin("");
      if (!next('\\')) return rejectInner();
      if (!next()) return rejectInner();
      while (singleQuoted_0());
      return acceptInner();
    }
  
  //=====================================================================
  //  regexpLiteral = "/" (!"/" !"\" _)* ("\" _ (!"/" !"\" _)*)* "/" ("m"
  //    / "g" / "i")* spacing ;
  //=====================================================================
  private boolean regexpLiteral()
    {
      begin("regexpLiteral");
      if (!next('/')) return reject();
      while (regexpLiteral_0());
      while (regexpLiteral_1());
      if (!next('/')) return reject();
      while (regexpLiteral_2());
      spacing();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  regexpLiteral_0 = !"/" !"\" _
  //-------------------------------------------------------------------
  private boolean regexpLiteral_0()
    {
      begin("");
      if (!aheadNot('/')) return rejectInner();
      if (!aheadNot('\\')) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  regexpLiteral_1 = "\" _ (!"/" !"\" _)*
  //-------------------------------------------------------------------
  private boolean regexpLiteral_1()
    {
      begin("");
      if (!next('\\')) return rejectInner();
      if (!next()) return rejectInner();
      while (regexpLiteral_0());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  regexpLiteral_2 = "m" / "g" / "i"
  //-------------------------------------------------------------------
  private boolean regexpLiteral_2()
    {
      begin("");
      if (next('m')) return acceptInner();
      if (next('g')) return acceptInner();
      if (next('i')) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  numberLiteral = numberLiteral2 spacing / integerLiteral spacing ;
  //=====================================================================
  private boolean numberLiteral()
    {
      begin("numberLiteral");
      if (numberLiteral_0()) return accept();
      if (numberLiteral_1()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  numberLiteral_0 = numberLiteral2 spacing
  //-------------------------------------------------------------------
  private boolean numberLiteral_0()
    {
      begin("");
      if (!numberLiteral2()) return rejectInner();
      spacing();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  numberLiteral_1 = integerLiteral spacing
  //-------------------------------------------------------------------
  private boolean numberLiteral_1()
    {
      begin("");
      if (!integerLiteral()) return rejectInner();
      spacing();
      return acceptInner();
    }
  
  //=====================================================================
  //  decimalIntegerLiteral = "0" / [1-9] [0-9]* ;
  //=====================================================================
  private boolean decimalIntegerLiteral()
    {
      begin("decimalIntegerLiteral");
      if (next('0')) return accept();
      if (decimalIntegerLiteral_0()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  decimalIntegerLiteral_0 = [1-9] [0-9]*
  //-------------------------------------------------------------------
  private boolean decimalIntegerLiteral_0()
    {
      begin("");
      if (!nextIn('1','9')) return rejectInner();
      while (nextIn('0','9'));
      return acceptInner();
    }
  
  //=====================================================================
  //  exponentPart = [eE] [+-]? [0-9]+ ;
  //=====================================================================
  private boolean exponentPart()
    {
      begin("exponentPart");
      if (!nextIn("eE")) return reject();
      nextIn("+-");
      if (!nextIn('0','9')) return reject();
      while (nextIn('0','9'));
      return accept();
    }
  
  //=====================================================================
  //  numberLiteral2 = decimalIntegerLiteral ("." [0-9]*)? exponentPart?
  //    / "." [0-9]+ exponentPart? / "NaN" / "Infinity" ;
  //=====================================================================
  private boolean numberLiteral2()
    {
      begin("numberLiteral2");
      if (numberLiteral2_0()) return accept();
      if (numberLiteral2_1()) return accept();
      if (next("NaN")) return accept();
      if (next("Infinity")) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  numberLiteral2_0 = decimalIntegerLiteral ("." [0-9]*)?
  //    exponentPart?
  //-------------------------------------------------------------------
  private boolean numberLiteral2_0()
    {
      begin("");
      if (!decimalIntegerLiteral()) return rejectInner();
      numberLiteral2_2();
      exponentPart();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  numberLiteral2_1 = "." [0-9]+ exponentPart?
  //-------------------------------------------------------------------
  private boolean numberLiteral2_1()
    {
      begin("");
      if (!next('.')) return rejectInner();
      if (!nextIn('0','9')) return rejectInner();
      while (nextIn('0','9'));
      exponentPart();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  numberLiteral2_2 = "." [0-9]*
  //-------------------------------------------------------------------
  private boolean numberLiteral2_2()
    {
      begin("");
      if (!next('.')) return rejectInner();
      while (nextIn('0','9'));
      return acceptInner();
    }
  
  //=====================================================================
  //  integerLiteral = "0" [xX] [0-9a-fA-F]+ / decimalIntegerLiteral ;
  //=====================================================================
  private boolean integerLiteral()
    {
      begin("integerLiteral");
      if (integerLiteral_0()) return accept();
      if (decimalIntegerLiteral()) return accept();
      return reject();
    }
  
  //-------------------------------------------------------------------
  //  integerLiteral_0 = "0" [xX] [0-9a-fA-F]+
  //-------------------------------------------------------------------
  private boolean integerLiteral_0()
    {
      begin("");
      if (!next('0')) return rejectInner();
      if (!nextIn("xX")) return rejectInner();
      if (!nextIn("0-9a-fA-F")) return rejectInner();
      while (nextIn("0-9a-fA-F"));
      return acceptInner();
    }
  
  //=====================================================================
  //  spacing = (space / multilineComment / singlelineComment)* ;
  //=====================================================================
  private boolean spacing()
    {
      begin("spacing");
      while (spacing_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  spacing_0 = space / multilineComment / singlelineComment
  //-------------------------------------------------------------------
  private boolean spacing_0()
    {
      begin("");
      if (space()) return acceptInner();
      if (multilineComment()) return acceptInner();
      if (singlelineComment()) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  multilineComment = "/*" (!"*/" _)* "*/" ;
  //=====================================================================
  private boolean multilineComment()
    {
      begin("multilineComment");
      if (!next("/*")) return reject();
      while (multilineComment_0());
      if (!next("*/")) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  multilineComment_0 = !"*/" _
  //-------------------------------------------------------------------
  private boolean multilineComment_0()
    {
      begin("");
      if (!aheadNot("*/")) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  singlelineComment = "//" (!"\n" !"\r" _)* ("\r" / "\r\n" / "\n") ;
  //=====================================================================
  private boolean singlelineComment()
    {
      begin("singlelineComment");
      if (!next("//")) return reject();
      while (singlelineComment_0());
      if (!next('\r')
       && !next("\r\n")
       && !next('\n')
         ) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  singlelineComment_0 = !"\n" !"\r" _
  //-------------------------------------------------------------------
  private boolean singlelineComment_0()
    {
      begin("");
      if (!aheadNot('\n')) return rejectInner();
      if (!aheadNot('\r')) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  space = [ \t\r\n] ;
  //=====================================================================
  private boolean space()
    {
      begin("space");
      if (!nextIn(" \t\r\n")) return reject();
      return accept();
    }
  
  //=====================================================================
  //  NOT = "!" spacing ;
  //=====================================================================
  private boolean NOT()
    {
      begin("NOT");
      if (!next('!')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  NOTEQ = "!=" spacing ;
  //=====================================================================
  private boolean NOTEQ()
    {
      begin("NOTEQ");
      if (!next("!=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  SUR = "%" spacing ;
  //=====================================================================
  private boolean SUR()
    {
      begin("SUR");
      if (!next('%')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  SUREQ = "%=" spacing ;
  //=====================================================================
  private boolean SUREQ()
    {
      begin("SUREQ");
      if (!next("%=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  AND = "&&" spacing ;
  //=====================================================================
  private boolean AND()
    {
      begin("AND");
      if (!next("&&")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BITAND = "&" spacing ;
  //=====================================================================
  private boolean BITAND()
    {
      begin("BITAND");
      if (!next('&')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BITANDEQ = "&=" spacing ;
  //=====================================================================
  private boolean BITANDEQ()
    {
      begin("BITANDEQ");
      if (!next("&=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  LPAR = "(" spacing ;
  //=====================================================================
  private boolean LPAR()
    {
      begin("LPAR");
      if (!next('(')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  RPAR = ")" spacing ;
  //=====================================================================
  private boolean RPAR()
    {
      begin("RPAR");
      if (!next(')')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  MUL = "*" spacing ;
  //=====================================================================
  private boolean MUL()
    {
      begin("MUL");
      if (!next('*')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  MULEQ = "*=" spacing ;
  //=====================================================================
  private boolean MULEQ()
    {
      begin("MULEQ");
      if (!next("*=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  ADD = "+" spacing ;
  //=====================================================================
  private boolean ADD()
    {
      begin("ADD");
      if (!next('+')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  INC = "++" spacing ;
  //=====================================================================
  private boolean INC()
    {
      begin("INC");
      if (!next("++")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  ADDEQ = "+=" spacing ;
  //=====================================================================
  private boolean ADDEQ()
    {
      begin("ADDEQ");
      if (!next("+=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  COMMA = "," spacing ;
  //=====================================================================
  private boolean COMMA()
    {
      begin("COMMA");
      if (!next(',')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  SUB = "-" spacing ;
  //=====================================================================
  private boolean SUB()
    {
      begin("SUB");
      if (!next('-')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  DEC = "--" spacing ;
  //=====================================================================
  private boolean DEC()
    {
      begin("DEC");
      if (!next("--")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  SUBEQ = "-=" spacing ;
  //=====================================================================
  private boolean SUBEQ()
    {
      begin("SUBEQ");
      if (!next("-=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  ARROW = "->" spacing ;
  //=====================================================================
  private boolean ARROW()
    {
      begin("ARROW");
      if (!next("->")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  DOT = "." spacing ;
  //=====================================================================
  private boolean DOT()
    {
      begin("DOT");
      if (!next('.')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  ARGS = "..." spacing ;
  //=====================================================================
  private boolean ARGS()
    {
      begin("ARGS");
      if (!next("...")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  DIV = "/" spacing ;
  //=====================================================================
  private boolean DIV()
    {
      begin("DIV");
      if (!next('/')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  DIVEQ = "/=" spacing ;
  //=====================================================================
  private boolean DIVEQ()
    {
      begin("DIVEQ");
      if (!next("/=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  COLON = ":" spacing ;
  //=====================================================================
  private boolean COLON()
    {
      begin("COLON");
      if (!next(':')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  SEMI = ";" spacing ;
  //=====================================================================
  private boolean SEMI()
    {
      begin("SEMI");
      if (!next(';')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  LT = "<" spacing ;
  //=====================================================================
  private boolean LT()
    {
      begin("LT");
      if (!next('<')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  LSHIFT = "<<" spacing ;
  //=====================================================================
  private boolean LSHIFT()
    {
      begin("LSHIFT");
      if (!next("<<")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  LSHIFTEQ = "<<=" spacing ;
  //=====================================================================
  private boolean LSHIFTEQ()
    {
      begin("LSHIFTEQ");
      if (!next("<<=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  UNSIGNEDRSHIFT = ">>>" spacing ;
  //=====================================================================
  private boolean UNSIGNEDRSHIFT()
    {
      begin("UNSIGNEDRSHIFT");
      if (!next(">>>")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  UNSIGNEDRSHIFTEQ = ">>>=" spacing ;
  //=====================================================================
  private boolean UNSIGNEDRSHIFTEQ()
    {
      begin("UNSIGNEDRSHIFTEQ");
      if (!next(">>>=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  RSHIFT = ">>" spacing ;
  //=====================================================================
  private boolean RSHIFT()
    {
      begin("RSHIFT");
      if (!next(">>")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  RSHIFTEQ = ">>=" spacing ;
  //=====================================================================
  private boolean RSHIFTEQ()
    {
      begin("RSHIFTEQ");
      if (!next(">>=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  LTEQ = "<=" spacing ;
  //=====================================================================
  private boolean LTEQ()
    {
      begin("LTEQ");
      if (!next("<=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  ASSIGN = "=" spacing ;
  //=====================================================================
  private boolean ASSIGN()
    {
      begin("ASSIGN");
      if (!next('=')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  EQ = "==" spacing ;
  //=====================================================================
  private boolean EQ()
    {
      begin("EQ");
      if (!next("==")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  GT = ">" spacing ;
  //=====================================================================
  private boolean GT()
    {
      begin("GT");
      if (!next('>')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  GTEQ = ">=" spacing ;
  //=====================================================================
  private boolean GTEQ()
    {
      begin("GTEQ");
      if (!next(">=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  COND = "?" spacing ;
  //=====================================================================
  private boolean COND()
    {
      begin("COND");
      if (!next('?')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  LBRA = "[" spacing ;
  //=====================================================================
  private boolean LBRA()
    {
      begin("LBRA");
      if (!next('[')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  RBRA = "]" spacing ;
  //=====================================================================
  private boolean RBRA()
    {
      begin("RBRA");
      if (!next(']')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  XOR = "^" spacing ;
  //=====================================================================
  private boolean XOR()
    {
      begin("XOR");
      if (!next('^')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  XOREQ = "^=" spacing ;
  //=====================================================================
  private boolean XOREQ()
    {
      begin("XOREQ");
      if (!next("^=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  LWING = "{" spacing ;
  //=====================================================================
  private boolean LWING()
    {
      begin("LWING");
      if (!next('{')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BITOR = "|" spacing ;
  //=====================================================================
  private boolean BITOR()
    {
      begin("BITOR");
      if (!next('|')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BITOREQ = "|=" spacing ;
  //=====================================================================
  private boolean BITOREQ()
    {
      begin("BITOREQ");
      if (!next("|=")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  OR = "||" spacing ;
  //=====================================================================
  private boolean OR()
    {
      begin("OR");
      if (!next("||")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  RWING = "}" spacing ;
  //=====================================================================
  private boolean RWING()
    {
      begin("RWING");
      if (!next('}')) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  MAYBEUNDEFINED = "MayBeUndefined" spacing ;
  //=====================================================================
  private boolean MAYBEUNDEFINED()
    {
      begin("MAYBEUNDEFINED");
      if (!next("MayBeUndefined")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  NULLABLE = "Nullable" spacing ;
  //=====================================================================
  private boolean NULLABLE()
    {
      begin("NULLABLE");
      if (!next("Nullable")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  ABSTRACT = "abstract" spacing ;
  //=====================================================================
  private boolean ABSTRACT()
    {
      begin("ABSTRACT");
      if (!next("abstract")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  AS = "as" spacing ;
  //=====================================================================
  private boolean AS()
    {
      begin("AS");
      if (!next("as")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  ASSERT = "assert" spacing ;
  //=====================================================================
  private boolean ASSERT()
    {
      begin("ASSERT");
      if (!next("assert")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BOOLEAN = "boolean" spacing ;
  //=====================================================================
  private boolean BOOLEAN()
    {
      begin("BOOLEAN");
      if (!next("boolean")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BREAK = "break" spacing ;
  //=====================================================================
  private boolean BREAK()
    {
      begin("BREAK");
      if (!next("break")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  CASE = "case" spacing ;
  //=====================================================================
  private boolean CASE()
    {
      begin("CASE");
      if (!next("case")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  CATCH = "catch" spacing ;
  //=====================================================================
  private boolean CATCH()
    {
      begin("CATCH");
      if (!next("catch")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  CLASS = "class" spacing ;
  //=====================================================================
  private boolean CLASS()
    {
      begin("CLASS");
      if (!next("class")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  CONST = "const" spacing ;
  //=====================================================================
  private boolean CONST()
    {
      begin("CONST");
      if (!next("const")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  CONSTRUCTOR = "constructor" spacing ;
  //=====================================================================
  private boolean CONSTRUCTOR()
    {
      begin("CONSTRUCTOR");
      if (!next("constructor")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  CONTINUE = "continue" spacing ;
  //=====================================================================
  private boolean CONTINUE()
    {
      begin("CONTINUE");
      if (!next("continue")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  DEBUGGER = "debugger" spacing ;
  //=====================================================================
  private boolean DEBUGGER()
    {
      begin("DEBUGGER");
      if (!next("debugger")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  DEFAULT = "default" spacing ;
  //=====================================================================
  private boolean DEFAULT()
    {
      begin("DEFAULT");
      if (!next("default")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  DELETE = "delete" spacing ;
  //=====================================================================
  private boolean DELETE()
    {
      begin("DELETE");
      if (!next("delete")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  DO = "do" spacing ;
  //=====================================================================
  private boolean DO()
    {
      begin("DO");
      if (!next("do")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  ELSE = "else" spacing ;
  //=====================================================================
  private boolean ELSE()
    {
      begin("ELSE");
      if (!next("else")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  EXTENDS = "extends" spacing ;
  //=====================================================================
  private boolean EXTENDS()
    {
      begin("EXTENDS");
      if (!next("extends")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  FALSE = "false" spacing ;
  //=====================================================================
  private boolean FALSE()
    {
      begin("FALSE");
      if (!next("false")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  FINAL = "final" spacing ;
  //=====================================================================
  private boolean FINAL()
    {
      begin("FINAL");
      if (!next("final")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  FINALLY = "finally" spacing ;
  //=====================================================================
  private boolean FINALLY()
    {
      begin("FINALLY");
      if (!next("finally")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  FOR = "for" spacing ;
  //=====================================================================
  private boolean FOR()
    {
      begin("FOR");
      if (!next("for")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  FROM = "from" spacing ;
  //=====================================================================
  private boolean FROM()
    {
      begin("FROM");
      if (!next("from")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  FUNCTION = "function" spacing ;
  //=====================================================================
  private boolean FUNCTION()
    {
      begin("FUNCTION");
      if (!next("function")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  IF = "if" spacing ;
  //=====================================================================
  private boolean IF()
    {
      begin("IF");
      if (!next("if")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  IMPLEMENTS = "implements" spacing ;
  //=====================================================================
  private boolean IMPLEMENTS()
    {
      begin("IMPLEMENTS");
      if (!next("implements")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  IMPORT = "import" spacing ;
  //=====================================================================
  private boolean IMPORT()
    {
      begin("IMPORT");
      if (!next("import")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  IN = "in" spacing ;
  //=====================================================================
  private boolean IN()
    {
      begin("IN");
      if (!next("in")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  INLINE = "inline" spacing ;
  //=====================================================================
  private boolean INLINE()
    {
      begin("INLINE");
      if (!next("inline")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  INSTANCEOF = "instanceof" spacing ;
  //=====================================================================
  private boolean INSTANCEOF()
    {
      begin("INSTANCEOF");
      if (!next("instanceof")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  INT = "int" spacing ;
  //=====================================================================
  private boolean INT()
    {
      begin("INT");
      if (!next("int")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  INTERFACE = "interface" spacing ;
  //=====================================================================
  private boolean INTERFACE()
    {
      begin("INTERFACE");
      if (!next("interface")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  INTO = "into" spacing ;
  //=====================================================================
  private boolean INTO()
    {
      begin("INTO");
      if (!next("into")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  LOG = "log" spacing ;
  //=====================================================================
  private boolean LOG()
    {
      begin("LOG");
      if (!next("log")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  MIXIN = "mixin" spacing ;
  //=====================================================================
  private boolean MIXIN()
    {
      begin("MIXIN");
      if (!next("mixin")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  NATIVE = "native" spacing ;
  //=====================================================================
  private boolean NATIVE()
    {
      begin("NATIVE");
      if (!next("native")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  NEW = "new" spacing ;
  //=====================================================================
  private boolean NEW()
    {
      begin("NEW");
      if (!next("new")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  NULL = "null" spacing ;
  //=====================================================================
  private boolean NULL()
    {
      begin("NULL");
      if (!next("null")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  NUMBER = "number" spacing ;
  //=====================================================================
  private boolean NUMBER()
    {
      begin("NUMBER");
      if (!next("number")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  OVERRIDE = "override" spacing ;
  //=====================================================================
  private boolean OVERRIDE()
    {
      begin("OVERRIDE");
      if (!next("override")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  RETURN = "return" spacing ;
  //=====================================================================
  private boolean RETURN()
    {
      begin("RETURN");
      if (!next("return")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  STATIC = "static" spacing ;
  //=====================================================================
  private boolean STATIC()
    {
      begin("STATIC");
      if (!next("static")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  STRING = "string" spacing ;
  //=====================================================================
  private boolean STRING()
    {
      begin("STRING");
      if (!next("string")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  SUPER = "super" spacing ;
  //=====================================================================
  private boolean SUPER()
    {
      begin("SUPER");
      if (!next("super")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  SWITCH = "switch" spacing ;
  //=====================================================================
  private boolean SWITCH()
    {
      begin("SWITCH");
      if (!next("switch")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  THIS = "this" spacing ;
  //=====================================================================
  private boolean THIS()
    {
      begin("THIS");
      if (!next("this")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  THROW = "throw" spacing ;
  //=====================================================================
  private boolean THROW()
    {
      begin("THROW");
      if (!next("throw")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  TRUE = "true" spacing ;
  //=====================================================================
  private boolean TRUE()
    {
      begin("TRUE");
      if (!next("true")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  TRY = "try" spacing ;
  //=====================================================================
  private boolean TRY()
    {
      begin("TRY");
      if (!next("try")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  TYPEOF = "typeof" spacing ;
  //=====================================================================
  private boolean TYPEOF()
    {
      begin("TYPEOF");
      if (!next("typeof")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  UNDEFINED = "undefined" spacing ;
  //=====================================================================
  private boolean UNDEFINED()
    {
      begin("UNDEFINED");
      if (!next("undefined")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  VAR = "var" spacing ;
  //=====================================================================
  private boolean VAR()
    {
      begin("VAR");
      if (!next("var")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  VARIANT = "variant" spacing ;
  //=====================================================================
  private boolean VARIANT()
    {
      begin("VARIANT");
      if (!next("variant")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  VOID = "void" spacing ;
  //=====================================================================
  private boolean VOID()
    {
      begin("VOID");
      if (!next("void")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  WHILE = "while" spacing ;
  //=====================================================================
  private boolean WHILE()
    {
      begin("WHILE");
      if (!next("while")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BLTCONFAKE = "__fake__" spacing ;
  //=====================================================================
  private boolean BLTCONFAKE()
    {
      begin("BLTCONFAKE");
      if (!next("__fake__")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BLTCONNOCONVERT = "__noconvert__" spacing ;
  //=====================================================================
  private boolean BLTCONNOCONVERT()
    {
      begin("BLTCONNOCONVERT");
      if (!next("__noconvert__")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BLTCONPURE = "__pure__" spacing ;
  //=====================================================================
  private boolean BLTCONPURE()
    {
      begin("BLTCONPURE");
      if (!next("__pure__")) return reject();
      spacing();
      return accept();
    }
  
  //=====================================================================
  //  BLTCONREADONLY = "__readonly__" spacing ;
  //=====================================================================
  private boolean BLTCONREADONLY()
    {
      begin("BLTCONREADONLY");
      if (!next("__readonly__")) return reject();
      spacing();
      return accept();
    }
  
}
