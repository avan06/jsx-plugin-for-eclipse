programFile
	=	spacing? importStatement* classDefinition* !_ {}
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L926
importStatement
	=	IMPORT (ident (COMMA ident)* FROM)? string (INTO ident)? SEMI {}
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L986
classDefinition
	=	oClassModifiers* (oClassDef / oInterfaceDef / oMixinDef) spacing?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1016
oClassModifiers
	=	ABSTRACT / FINAL / NATIVE / BLTCONFAKE
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1038
oClassDef
	=	CLASS IDENT formalTypeArguments? (EXTENDS objectTypeDeclaration)? (IMPLEMENTS objectTypeDeclaration (COMMA objectTypeDeclaration)*)? LBRA memberDefinition* RBRA
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1038
oInterfaceDef
	=	INTERFACE IDENT formalTypeArguments? (IMPLEMENTS objectTypeDeclaration (COMMA objectTypeDeclaration)*)? LBRA memberDefinition* RBRA
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L1038
oMixinDef	
	=	MIXIN IDENT formalTypeArguments? LBRA memberDefinition* RBRA
	;

objectTypeDeclaration = "a";
memberDefinition = "a";
IDENT = "a";
formalTypeArguments = "a";
typeDeclaration = "a";
assignExpr = "a";


// Literals
ident
	=	([a-z] / [A-Z] / "_") ([a-z] / [A-Z] / "_" / [0-9])* spacing
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2600
nullLiteral
	=	(":" typeDeclaration)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2613
arrayLiteral
	=	(assignExpr ("," assignExpr)*)? "]" (":" typeDeclaration)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2633
hashLiteral
	=	((ident / numberLiteral / string) COLON assignExpr (COMMA (ident / numberLiteral / string) COLON assignExpr)*)? RBRA (COLON typeDeclaration)?
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2666
functionArgumentsExpr
	=	RPAR
	/	(ARGS IDENT / IDENT)? (COLON typeDeclaration)? (COMMA (ARGS IDENT / IDENT)? (COLON typeDeclaration)?)* RPAR
	;

// https://github.com/jsx/JSX/blob/4053b064a59c387dfcfcc9eb3fbd85750cc0a658/src/parser.js#L2711
argsExpr
	=	RPAR
	/	assignExpr (COMMA assignExpr)* RPAR
	;

string
	=	doubleQuoted
	/	singleQuoted
	;

doubleQuoted
	=	"\"" ^["\\]* ("\\" _ (!"\"" !"\\" _)*)* "\""
	;

singleQuoted
	=	"'" (!"'" !"\\" _)* ("\\" _ (!"'" !"\\" _)*)* "'"
	;

regexp
	=	"/" (!"/" !"\\" _)* ("\\" _ (!"/" !"\\" _)*)* "/" ("m" / "g" / "i")*
	;


numberLiteral
	=	numberLiteral2
	/	integerLiteral
	;

decimalIntegerLiteral
	=	"0"
	/	[1-9] [0-9]*
	;

exponentPart
	=	[eE] [+-]? [0-9]+
	;

// TODO rename
numberLiteral2
	=	decimalIntegerLiteral ("." [0-9]*)? exponentPart?
	/	"." [0-9]+ exponentPart?
	/	"NaN"
	/	"Infinity"
	;

integerLiteral
	=	"0" [xX] [0-9a-fA-F]+
	/	decimalIntegerLiteral
	;


// hidden
multilineComment
	=	"/*" ( !"*/" _ )* "*/"
	;

singlelineComment
	=	"//" ( !"\n" !"\r" _)* ("\r" / "\r\n" / "\n")
	;

spacing
	=	(space / multilineComment / singlelineComment)+
	;

space
	=	[ \t\r\n]
	;



// Tokens
NOT
	=	"!" spacing
	;

NOTEQ // not eq
	=	"!=" spacing
	;

SUR
	=	"%" spacing
	;

SUREEQ // sur eq
	=	"%=" spacing
	;

AND
	=	"&&" spacing
	;

BITAND // bit and
	=	"&" spacing
	;

BITANDEQ // bit and eq
	=	"&=" spacing
	;

LPAR // L par
	=	"(" spacing
	;

RPAR // R par
	=	")" spacing
	;

MUL
	=	"*" spacing
	;

MULEQ // mul eq
	=	"*=" spacing
	;

ADD
	=	"+" spacing
	;

INC
	=	"++" spacing
	;

ADDEQ // add eq
	=	"+=" spacing
	;

COMMA
	=	"," spacing
	;

SUB
	=	"-" spacing
	;

DEC
	=	"--" spacing
	;

SUBEQ // subeq
	=	"-=" spacing
	;

ARROW
	=	"->" spacing
	;

DOT
	=	"." spacing
	;

ARGS
	=	"..." spacing
	;

DIV
	=	"/" spacing
	;

DIVEQ // div eq
	=	"/=" spacing
	;

COLON
	=	":" spacing
	;

SEMI
	=	";" spacing
	;

LT
	=	"<" spacing
	;

LSHIFT // L shift
	=	"<<" spacing
	;

LSHIFTEQ // L shift eq
	=	"<<=" spacing
	;

LTEQ // lt eq
	=	"<=" spacing
	;

ASSIGN
	=	"=" spacing
	;

EQ
	=	"==" spacing
	;

GT
	=	">" spacing
	;

GTEQ // gt eq
	=	">=" spacing
	;

COND
	=	"?" spacing
	;

LBRA // L bra
	=	"[" spacing
	;

RBRA // r bra
	=	"]" spacing
	;

XOR
	=	"^" spacing
	;

XOREQ // xor eq
	=	"^=" spacing
	;

LWING // L wing
	=	"{" spacing
	;

BITOR // bit or
	=	"|" spacing
	;

BITOREQ // bit or eq
	=	"|=" spacing
	;

OR
	=	"||" spacing
	;

RWING // R wing
	=	"}" spacing
	;

MAYBEUNDEFINED // may be undefined
	=	"MayBeUndefined" spacing
	;

NULLABLE
	=	"Nullable" spacing
	;

ABSTRACT
	=	"abstract" spacing
	;

AS
	=	"as" spacing
	;

ASSERT
	=	"assert" spacing
	;

BOOLEAN
	=	"boolean" spacing
	;

BREAK
	=	"break" spacing
	;

CASE
	=	"case" spacing
	;

CATCH
	=	"catch" spacing
	;

CLASS
	=	"class" spacing
	;

CONST
	=	"const" spacing
	;

CONSTRUCTOR
	=	"constructor" spacing
	;

CONTINUE
	=	"continue" spacing
	;

DEBUGGER
	=	"debugger" spacing
	;

DEFAULT
	=	"default" spacing
	;

DELETE
	=	"delete" spacing
	;

DO
	=	"do" spacing
	;

ELSE
	=	"else" spacing
	;

EXTENDS
	=	"extends" spacing
	;

FALSE
	=	"false" spacing
	;

FINAL
	=	"final" spacing
	;

FINALLY
	=	"finally" spacing
	;

FOR
	=	"for" spacing
	;

FROM
	=	"from" spacing
	;

FUNCTION
	=	"function" spacing
	;

IF
	=	"if" spacing
	;

IMPLEMENTS
	=	"implements" spacing
	;

IMPORT
	=	"import" spacing
	;

IN
	=	"in" spacing
	;

INLINE
	=	"inline" spacing
	;

INSTANCEOF
	=	"instanceof" spacing
	;

INT
	=	"int" spacing
	;

INTERFACE
	=	"interface" spacing
	;

INTO
	=	"into" spacing
	;

LOG
	=	"log" spacing
	;

MIXIN
	=	"mixin" spacing
	;

NATIVE
	=	"native" spacing
	;

NEW
	=	"new" spacing
	;

NULL
	=	"null" spacing
	;

NUMBER
	=	"number" spacing
	;

OVERRIDE
	=	"override" spacing
	;

RETURN
	=	"return" spacing
	;

STATIC
	=	"static" spacing
	;

STRING
	=	"string" spacing
	;

SUPER
	=	"super" spacing
	;

SWITCH
	=	"switch" spacing
	;

THIS
	=	"this" spacing
	;

THROW
	=	"throw" spacing
	;

TRUE
	=	"true" spacing
	;

TRY
	=	"try" spacing
	;

TYPEOF
	=	"typeof" spacing
	;

UNDEFINED
	=	"undefined" spacing
	;

VAR
	=	"var" spacing
	;

VARIANT
	=	"variant" spacing
	;

VOID
	=	"void" spacing
	;

WHILE
	=	"while" spacing
	;

BLTCONFAKE // built-in constant __fake__
	=	"__fake__" spacing
	;

BLTCONNOCONVERT // built-in constant __noconvert__
	=	"__noconvert__" spacing
	;

BLTCONPURE // built-in constant __pure__
	=	"__pure__" spacing
	;

BLTCONREADONLY // built-in constant __readonly__
	=	"__readonly__" spacing
	;
